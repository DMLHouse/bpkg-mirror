name: Build Pkg Open Ended
run-name: "[${{ inputs.pkg_branch }}] ${{ inputs.pkg_name }}"
on:
  workflow_dispatch:
    inputs:
      pkg_name:
        description: 'Package'
        required: true
        default: ''
        type: string
      pkg_branch:
        description: 'Branch'
        required: true
        default: ''
        type: string
      upstream_repo_commit:
        description: 'Upstream repo SHA (opt.)'
        required: false
        default: ''
        type: string
      build_repo:
        description: 'Update APT Repo'
        required: false
        default: true
        type: boolean

defaults:
  run:
    shell: bash

jobs:
  bp:
    runs-on: ubuntu-latest
    if: ${{ always() && inputs.pkg_name != '' && inputs.pkg_branch != '' && !(cancelled() || contains(needs.*.result, 'cancelled') || contains(needs.*.result, 'failure')) }}
    name: "[${{ inputs.pkg_branch }}] ${{ inputs.pkg_name }}"
    container:
      image: ${{ vars.UPSTREAM_MAIN_ROUTER_REPO }}:${{ inputs.pkg_branch }}
      options: --privileged --sysctl net.ipv6.conf.lo.disable_ipv6=0   
    steps:
      - name: Print workflow inputs
        run: |
          echo "pkg_name: ${{ inputs.pkg_name }}"
          echo "pkg_branch: ${{ inputs.pkg_branch }}"
          echo "upstream_repo_commit: ${{ inputs.upstream_repo_commit }}"
          echo "build_repo: ${{ inputs.build_repo }}"

      - name: Set upstream repo SHA
        id: getUpstreamSHA
        run: |
          [ -n "${{ inputs.upstream_repo_commit }}" ] \
            && { echo "SHA=${{ inputs.upstream_repo_commit }}" | tee -a $GITHUB_OUTPUT ; } \
            || { echo "SHA=$(curl -sL https://api.github.com/repos/${{ vars.UPSTREAM_MAIN_ROUTER_REPO }}/commits/${{ inputs.pkg_branch }} | jq -r .'sha')" | tee -a $GITHUB_OUTPUT ; }

      - name: Set safe-dir
        run: git config --global --add safe.directory '*'

      - name: Checkout upstream repo
        uses: actions/checkout@v4
        with:
          repository: '${{ vars.UPSTREAM_MAIN_ROUTER_REPO }}'
          ref: ${{ inputs.pkg_branch }}
          show-progress: true
          fetch-depth: 0

      - name: Reset repo to specific commit
        run: git reset --hard ${{ steps.getUpstreamSHA.outputs.SHA }}

      - name: Checkout my repository
        id: myRepoCheckout
        run: |
          git clone --quiet https://${{ secrets.ROUTER_PATCH_REPO_TOKEN }}@${{ secrets.ROUTER_PATCH_REPO }} _moveme
          mv _moveme/* ./
          rm -rf _moveme

      - name: APT Refresh
        run: apt-get update

      - name: Patch scripts
        run: ./patch-package-build.sh

      - name: Build package
        id: build
        run: |
          ./build-core.sh -b ${{ inputs.pkg_branch }} -p ${{ inputs.pkg_name }}
          echo "artifact_name=${{ inputs.pkg_branch }}-${{ inputs.pkg_name }}" | tee -a $GITHUB_OUTPUT

      - name: Remove extraneous files
        if: ${{ steps.build.outcome == 'success' }}
        working-directory: scripts/package-build
        run: find . -name "*build-deps*" -type f -exec rm -f {} +

      - name: Check for deb creation
        if: ${{ steps.build.outcome == 'success' }}
        id: debcheck
        working-directory: scripts/package-build/${{ inputs.pkg_name }}
        run: ls *.deb &> /dev/null

      - name: Upload artifact to github
        if: ${{ steps.debcheck.outcome == 'success' }}
        uses: actions/upload-artifact@v4
        id: artifact-upload
        with:
          name: ${{ steps.build.outputs.artifact_name }}
          path: scripts/package-build/${{ inputs.pkg_name }}/*.deb
          retention-days: 1

      - name: Add SSH Keys
        if: ${{ steps.debcheck.outcome == 'success' }}
        id: addssh
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Send .deb to repo
        if: ${{ steps.addssh.outcome == 'success' }}
        working-directory: scripts/package-build/${{ inputs.pkg_name }}
        run: ../../../upload.sh -b ${{ inputs.pkg_branch }} -h ${{ secrets.REPOHOST }}

      - name: Build and sign repo
        if: ${{ inputs.build_repo && steps.addssh.outcome == 'success' }}
        run: ./build-repo.sh -b ${{ inputs.pkg_branch }} -h ${{ secrets.REPOHOST }} -u ${{ secrets.REPOHOST_USER }}
